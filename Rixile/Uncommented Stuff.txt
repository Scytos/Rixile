//uncommented stuff

/*void RCS()
{
if (GetAsyncKeyState(VK_F8))
{
rToggle = !rToggle;
if (rToggle) std::cout << "RCS ON" << std::endl;
else std::cout << "RCS OFF" << std::endl;
Sleep(200);
}
if (!rToggle) return;

DWORD ClientState;
DWORD pLocalPlayer;
int pShotsFired;
Vector CurrentViewAngles;
Vector vPunch;
Vector NewViewAngles;
Vector OldAimPunch;
Vector random;
OldAimPunch.x = OldAimPunch.y = OldAimPunch.z = 0;

pLocalPlayer = m->ReadMem<DWORD>(m->cDll.dwBase + offsets::localPlayer);
vPunch = m->ReadMem<Vector>(pLocalPlayer + offsets::m_viewPunchAngle);
pShotsFired = m->ReadMem<int>(pLocalPlayer + offsets::m_iShotsFired);

if (pShotsFired > 1)
{
ClientState = m->ReadMem<DWORD>(m->cDll.dwBase + offsets::dwClientState);
CurrentViewAngles = m->ReadMem<Vector>(ClientState + offsets::dwClientState_ViewAngles);

NewViewAngles.x = ((CurrentViewAngles.x + OldAimPunch.x) - (vPunch.x * 2.f));
NewViewAngles.y = ((CurrentViewAngles.y + OldAimPunch.y) - (vPunch.y * 2.f));
NewViewAngles.z = 0;

SaveCPU(1);
}

}*/


/*void visGlow()
{
	//This is a shitty way todo a glowesp gonna rework that when I have time
	if (GetAsyncKeyState(VK_F4))
	{
		vgToggle = !vgToggle;
		if (vgToggle) std::cout << "Visible Glow is ON" << std::endl;
		else std::cout << "Visible Glow is OFF" << std::endl;
		SaveCPU(200);
	}
	DWORD gPointer = m->ReadMem<DWORD>(m->cDll.dwBase + offsets::dwGlow);
	DWORD dwPla = m->ReadMem<DWORD>(m->cDll.dwBase + offsets::localPlayer);
	int lTeam = m->ReadMem<int>(dwPla + offsets::teamNum);
	if (!vgToggle) return;
	for (int i = 1; i < 64; i++)
	{
		int pEntity = m->ReadMem<int>(m->cDll.dwBase + offsets::entityList + i * 0x10);
		int pEntIdx = m->ReadMem<int>(pEntity + offsets::dwGlowIdx);

		int pEntTeam = m->ReadMem<int>(pEntity + offsets::teamNum);
		bool dormant = m->ReadMem<int>(pEntity + offsets::bDormant);

		if (dormant) continue;
		if (lTeam == pEntTeam) continue;

		glow_t vGlowObj = m->ReadMem<glow_t>(gPointer + (pEntIdx * 0x38));
		vGlowObj.r = .176f;
		vGlowObj.m_flGlowAlpha = 1.f;
		vGlowObj.g = .015f;
		vGlowObj.b = .337f;
		vGlowObj.m_bRenderWhenOccluded = false;
		vGlowObj.m_bRenderWhenUnoccluded = true;
		vGlowObj.m_nGlowStyle = 1;


		m->WriteMem(gPointer + (pEntIdx * 0x38), vGlowObj);
		SaveCPU(1);
	}
}*/

/*
void fovChanger()
{
if (GetAsyncKeyState(VK_NUMPAD1))
{
fovToggle = !fovToggle;
if (fovToggle) std::cout << "FOV Changer is ON" << std::endl;
else std::cout << "FOV Changer is OFF" << std::endl;
SaveCPU(200);
}
SaveCPU(1);
if (!fovToggle)
{
return;
}

int isScoped = m->ReadMem<int>(pLocal->getLocalPlayer() + offsets::isScoped); // checking if localplayer is scoped

if(isScoped == 0)m->WriteMem<int>(pLocal->getLocalPlayer() + offsets::m_iFOVStart-4, 110);
else if (isScoped > 0) m->WriteMem<int>(pLocal->getLocalPlayer() + offsets::m_iFOVStart - 4, 90);
}
*/

/*

void SkinChanger() // i fucking hate skinchangers and wont continue this prob I FUCKING HATED TO GET MINE SETUP WITH VARIOUS GHETTO METHODS
{
if (GetAsyncKeyState(VK_F8))
{
sToggle = !sToggle;
if (sToggle) std::cout << "Skinchanger is ON" << std::endl;
else std::cout << "Skinchanger is OFF" << std::endl;
SaveCPU(200);
}
if (!sToggle) return;
for (int j = 1; j <= 3; j++) // i wanna die for loop scanning 3 times
{
DWORD WeapEnt = m->ReadMem<DWORD>(pLocal->getLocalPlayer() + offsets::m_hMyWeapons + j * 0x4) & 0xFFF; // weapon entity
DWORD weaponBase = m->ReadMem<DWORD>(m->cDll.dwBase + offsets::entityList + (WeapEnt - 1) * 0x10); // weapon id
short weaponid = m->ReadMem<short>(weaponBase + offsets::m_iItemDefinitionIndex);
DWORD cState = m->ReadMem<DWORD>(m->eDll.dwBase + 0x589B34); // getting clientstate with engine
if (weaponid == 0) continue; // continue if id == 0
else if (weaponid > 64) continue; // same is above if its greater then 64
else
{
switch (weaponid)
{
case 1: { paintKit = 22; } // case1 = deagle
case 7: { paintKit = 22; } // case 7 = ak47
}
}
int currentPaintKit = m->ReadMem<int>(weaponBase + offsets::m_nFallbackPaintKit); // getting current paintkit
if (currentPaintKit != paintKit && currentPaintKit != -1)
{
m->WriteMem<int>(weaponBase + offsets::m_nFallbackPaintKit, paintKit); // writing our paintkit on our weapon base
m->WriteMem<float>(weaponBase + offsets::m_flFallbackWear, wear); // writing our wear on our weaponbase
m->WriteMem<int>(weaponBase + offsets::m_iEntityQuality, Quality); // same as above only quality
m->WriteMem<int>(weaponBase + offsets::m_iItemIDHigh, -1);
if (GetAsyncKeyState(VK_F4))
m->WriteMem<int>(cState + 0x174, -1); // forceupdate i wanna fk die
}
}
}
*/